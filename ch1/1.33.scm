(define (accumulate-filtered combiner null-value term a next b filter)
  (cond ((> a b) null-value)
	((filter a) (combiner (term a) (accumulate-filtered combiner null-value term (next a) next b filter)))
	(else (combiner null-value (accumulate-filtered combiner null-value term (next a) next b filter)))))

;;; sum of the squares of the prime numbers
(define (square x)
  (* x x))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
	((divides? test-divisor n) test-divisor)
	(else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (inc x)
  (+ x 1))
(define (sum-of-prime-squares a b)
  (accumulate-filtered + 0 square a inc b prime?))

;;; product of all the positive integers less than n that are relatively prime to n
(define (identity x)
  x)
(define (product-of-relative-prime n)
  (define (gcd m n)
    (cond ((< m n) (gcd n m))
	  ((= n 0) m)
	  (else (gcd n (remainder m n)))))
  (define (filter x)
    (= (gcd x n) 1))
  (accumulate-filtered * 1 identity 1 inc n filter))
